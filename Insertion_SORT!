#Insertion Sort!

Much less efficient on large lists than more advanced algos such as quick,merge, heap. 

1)Efficient for smaller lists.
2)stable
3)Online,can sort lists as it receives it. 
4)Inline,only requires const amount O(1) of add. memory space.

Worst case : O(n^2) comparisons and swaps 

Best case : O(n) comparisons and O(1) swaps 

AVg case : O(n^2) comp and swaps 

Worst case complexity : O(n^2) total, O(1) auxiliary. 

############################Implementation##################33
def insertion(arr):
    for k in range(1,len(arr)):
        key=arr[k]
        j=k 
        while j>0 and arr[j-1]>arr[j]:
            arr[j],arr[j-1]=arr[j-1],arr[j]
            j-=1 
    
    
arr=[1,2,3,45343,21,112,22]
insertion(arr)
print(arr)
############################################################
